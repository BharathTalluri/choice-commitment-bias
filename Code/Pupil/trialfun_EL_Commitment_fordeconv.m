function [trl, event] = trialfun_EL_Commitment_fordeconv(cfg)% Bharath Talluri & Anne Urai% code accompanying the choice commitment bias paper.%% # LICENSE% % Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. If you use the Software for your own research, cite the paper.% % THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.%%% header and events are already in the asc structures% TRLBEGIN TRLEND OFFSET ...% refdirec1 stimone int1offset ...%     choice  response  correct  RTbin binoffset ...%     stimtwo int2offset ...%     meandir estimate RTest estoffset]event   = cfg.event;value   = {event(find(~cellfun(@isempty,strfind({event.value},'a')))).value};sample  = [event(find(~cellfun(@isempty,strfind({event.value},'a')))).sample];% find all messages% determine the number of samples before and after the triggerpretrig  = -round(cfg.trialdef.pre  * cfg.fsample);posttrig =  round(cfg.trialdef.post * cfg.fsample);trl = [];session = cfg.session;for j = 1:length(value), % loop through the trials and create the trial matrix on each trl        % check that this is really a fixation trigger    if ~isempty(strfind(value{j}, 'blinkbreak_end')), % skip the fix trigger, that one is exactly aligned with stimulus onset                trlbegin = sample(j);        offset   = pretrig;                % trial starts at fixation, ignore actual fixation trigger (aligned        % with int1offset trigger)        fixoffset = sample(j);                 % first interval        if ~isempty(strfind(value{j+2}, 'int1')),            int1offset = sample(j+2);            % find the trial nr and block nr, scan message            scandat =  sscanf(value{j+2}, 'MSG %*f block%d_trial%d_int1_ref%d_dir%d');            blockcnt = scandat(1); trlcnt = scandat(2);            refdirec1 = scandat(3);             stimone = scandat(4)-scandat(3);        end                % binary choice        if ~isempty(strfind(value{j+3}, 'resp')),            resp = sscanf(value{j+3}, 'MSG %*f block%*d_trial%*d_choice%d_ref%d_dir%d_resp%f_correct%f_RT%f');            choice = resp(1); response = resp(4); correct = resp(5); RTbin = resp(6);                        % important: calculate the sample of the buttonpress             % (stim1 begin + 750 ms stim1 + RT)            % sample(j+2) was sent at the end of the response interval            binoffset = round(int1offset + cfg.fsample*0.75 + RTbin*cfg.fsample);            else            error('no respoffset sample found');        end                noSecondInterval = true;        if choice ~= -1 && (j+4) <= length(value),            if ~isempty(strfind(value{j+4}, 'int2')),                 noSecondInterval = false;                % if there is a second interval                % first interval                int2offset = sample(j+4);                % find the trial nr and block nr, scan message                scandat = sscanf(value{j+4}, 'MSG %*f block%d_trial%d_int2_ref%d_dir%d');                blockcnt = scandat(1); trlcnt = scandat(2);                refdirec2 = scandat(3); stimtwo = scandat(4)-scandat(3);                assert(isequal(refdirec1,refdirec2), 'error coding refdirec');                                % estimation                if ~isempty(strfind(value{j+5}, 'estimation')),                    estoffset = sample(j+5);                    % find the trial nr and block nr, scan message                    scandat = sscanf(value{j+5}, 'MSG %*f block%*d_trial%*d_estimation_ref%*d_meandir%f_resp%f_RT%f');                    meandir = scandat(1); estimate = scandat(2); RTest = scandat(3);                end                                % fieldtrip allows variable trial length                trlend = estoffset + posttrig;                assert(meandir==((stimone+stimtwo)/2), 'meandir is not the average of the two intervals');                            end        end                if noSecondInterval,            % put nans in place to pad the trialinfo matrix            stimtwo = nan; meandir = nan; estimate = nan; RTest = nan;            int2offset = nan; estoffset = nan;                        % fieldtrip allows variable trial length            trlend = binoffset + posttrig;            if isnan(trlend), % avoid error                trlend = int1offset + posttrig + 2*cfg.fsample;            end        end                % append all into trialinfo        newtrl   = [trlbegin trlend offset ...            fixoffset ...            refdirec1 stimone int1offset ...            choice  response  correct  RTbin binoffset ...            stimtwo int2offset ...            meandir estimate RTest estoffset ...            trlcnt blockcnt session];                trl      = [trl; newtrl];    endendend